name: Build Electron App

on:
  push:
    branches:
      - main 
      - master 
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        arch: [x64]
        include: 
          # macOS builds for Intel and Apple Silicon
          - os: macos-latest
            arch: x64 
          - os: macos-latest
            arch: arm64
          # Linux build
          - os: ubuntu-latest
            arch: x64
          # Windows build
          - os: windows-latest
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' 

      - name: Install dependencies (npm)
        run: npm install --frozen-lockfile

      - name: Build and package Electron app (macOS)
        if: runner.os == 'macOS'
        run: |
          npm run dist -- --mac --${{ matrix.arch }}
        shell: bash
        env:
          # 禁用 electron-builder 的自动签名发现功能，用于测试
          CSC_IDENTITY_AUTO_DISCOVERY: false 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and package Electron app (Windows & Linux)
        if: runner.os != 'macOS'
        run: |
          npm run dist -- --${{ matrix.os == 'windows-latest' && 'win' || 'linux' }} --${{ matrix.arch }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List files in dist directory 
        run: ls -R dist/
        shell: bash

      - name: Upload Windows Artifact (NSIS Installer)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Windows-Setup-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.exe 

      - name: Upload Windows Artifact (Portable)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Windows-portable-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.zip 

      - name: Upload macOS Artifact (DMG)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-macOS-${{ matrix.arch }}-${{ github.run_id }}.dmg
          path: dist/*.dmg

      - name: Upload macOS Artifact (ZIP)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-macOS-${{ matrix.arch }}-zip-${{ github.run_id }}
          path: dist/*mac*.zip 

      - name: Upload Linux Artifact (AppImage)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-AppImage-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.AppImage
          
      - name: Upload Linux Artifact (deb)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-deb-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.deb

      - name: Upload Linux Artifact (rpm)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-rpm-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.rpm
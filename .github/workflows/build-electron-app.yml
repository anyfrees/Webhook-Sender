name: Build Electron App and Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch: # Allows manual triggering
    inputs:
      tag_name:
        description: 'Tag for the release (e.g., v1.0.0 or nightly-YYYYMMDD)'
        required: false
        # Default is removed, will be handled by the script in publish-release job if not provided

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        arch: [x64]
        include:
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: x64
          - os: windows-latest
            arch: x64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (npm)
        run: npm install --frozen-lockfile

      - name: Build and package Electron app (macOS)
        if: runner.os == 'macOS'
        run: |
          npm run dist -- --mac --${{ matrix.arch }}
        shell: bash
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and package Electron app (Windows & Linux)
        if: runner.os != 'macOS'
        run: |
          npm run dist -- --${{ matrix.os == 'windows-latest' && 'win' || 'linux' }} --${{ matrix.arch }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List files in dist directory
        run: ls -R dist/
        shell: bash

      # --- Uploading Artifacts ---
      - name: Upload Windows Artifact (NSIS Installer)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Windows-Setup-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.exe
          if-no-files-found: error

      - name: Upload Windows Artifact (Portable)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Windows-portable-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.zip # Ensure package.json is configured to output .zip for portable
          if-no-files-found: error

      - name: Upload macOS Artifact (DMG)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-macOS-${{ matrix.arch }}-${{ github.run_id }}.dmg
          path: dist/*.dmg
          if-no-files-found: error

      - name: Upload macOS Artifact (ZIP)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-macOS-${{ matrix.arch }}-zip-${{ github.run_id }}
          path: dist/*mac*.zip 
          if-no-files-found: error

      - name: Upload Linux Artifact (AppImage)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-AppImage-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.AppImage
          if-no-files-found: error

      - name: Upload Linux Artifact (deb)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-deb-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.deb
          if-no-files-found: error

      - name: Upload Linux Artifact (rpm)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-rpm-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/*.rpm
          if-no-files-found: error

  publish-release:
    name: Publish to GitHub Releases
    needs: build
    # MODIFIED 'if' condition to include pushes to main branch
    if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Determine Tag Name and Release Info
        id: get_tag_info
        shell: bash
        run: |
          TAG_NAME_VAR=""
          RELEASE_NAME_VAR=""
          IS_PRERELEASE_VAR="true" # Default to prerelease

          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            TAG_NAME_VAR="${GITHUB_REF#refs/tags/}"
            RELEASE_NAME_VAR="Release ${TAG_NAME_VAR}"
            IS_PRERELEASE_VAR="false" # Tags are considered stable releases
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then # ADDED condition for main branch
            TAG_NAME_VAR="nightly-main-${{ github.sha }}" # Create a unique tag for main branch pushes
            RELEASE_NAME_VAR="Nightly Build (main branch - ${{ github.sha }})"
            IS_PRERELEASE_VAR="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_NAME_VAR="${{ github.event.inputs.tag_name || format('nightly-manual-{0}', github.run_id) }}"
            RELEASE_NAME_VAR="Nightly Build ${TAG_NAME_VAR}"
            IS_PRERELEASE_VAR="true"
          else
            TAG_NAME_VAR="unknown-tag-${{ github.run_id }}"
            RELEASE_NAME_VAR="Unknown Release ${{ github.run_id }}"
            IS_PRERELEASE_VAR="true"
          fi

          echo "TAG_NAME=${TAG_NAME_VAR}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${RELEASE_NAME_VAR}" >> $GITHUB_ENV
          echo "IS_PRERELEASE=${IS_PRERELEASE_VAR}" >> $GITHUB_ENV

          echo "Determined TAG_NAME: ${TAG_NAME_VAR}"
          echo "Determined RELEASE_NAME: ${RELEASE_NAME_VAR}"
          echo "Determined IS_PRERELEASE: ${IS_PRERELEASE_VAR}"

      - name: Create Download Directory
        run: mkdir -p release-assets

      - name: Download Windows Setup (x64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-Windows-Setup-x64-${{ github.run_id }}
          path: release-assets/
      - name: Download Windows Portable (x64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-Windows-portable-x64-${{ github.run_id }}
          path: release-assets/
      - name: Download macOS DMG (x64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-macOS-x64-${{ github.run_id }}.dmg
          path: release-assets/
      - name: Download macOS DMG (arm64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-macOS-arm64-${{ github.run_id }}.dmg
          path: release-assets/
      - name: Download macOS ZIP (x64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-macOS-x64-zip-${{ github.run_id }}
          path: release-assets/
      - name: Download macOS ZIP (arm64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-macOS-arm64-zip-${{ github.run_id }}
          path: release-assets/
      - name: Download Linux AppImage (x64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-Linux-AppImage-x64-${{ github.run_id }}
          path: release-assets/
      - name: Download Linux deb (x64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-Linux-deb-x64-${{ github.run_id }}
          path: release-assets/
      - name: Download Linux rpm (x64)
        uses: actions/download-artifact@v4
        with:
          name: Webhook-Sender-Linux-rpm-x64-${{ github.run_id }}
          path: release-assets/

      - name: List downloaded assets
        run: ls -R release-assets/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          body: |
            Automated release for ${{ env.TAG_NAME }}.
            Assets:
            - Windows Installer (x64)
            - Windows Portable (x64)
            - macOS DMG (Intel x64)
            - macOS DMG (Apple Silicon arm64)
            - macOS ZIP (Intel x64)
            - macOS ZIP (Apple Silicon arm64)
            - Linux AppImage (x64)
            - Linux .deb (x64)
            - Linux .rpm (x64)
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }}
          files: |
            release-assets/*.exe
            release-assets/*.zip
            release-assets/*.dmg
            release-assets/*.AppImage
            release-assets/*.deb
            release-assets/*.rpm
          fail_on_unmatched_files: true # Set to false if some artifacts might be missing for nightly/main pushes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

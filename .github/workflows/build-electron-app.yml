name: Build Electron App

on:
  push:
    branches:
      - main 
      - master 
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch || 'native' }})
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include: 
          - os: macos-latest
            arch: x64 
          - os: ubuntu-latest 
          - os: windows-latest 

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' 

      - name: Install dependencies (npm)
        run: npm install --frozen-lockfile

      - name: Build and package Electron app
        # 修改此处的 run 命令
        run: |
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            echo "Setting execute permission for electron-builder on $RUNNER_OS"
            chmod +x node_modules/.bin/electron-builder
          fi
          npm run dist -- --${{ matrix.os == 'macos-latest' && matrix.arch || (matrix.os == 'windows-latest' && 'win' || 'linux') }} ${{ matrix.arch && format('--{0}', matrix.arch) || '' }}
        shell: bash # 为所有平台强制使用 bash shell，以统一脚本行为
        env:
          # CSC_LINK: ${{ secrets.CSC_LINK }} 
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }} 
          # APPLE_ID: ${{ secrets.APPLE_ID }} 
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }} 
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }} 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: List files in dist directory 
        run: ls -R dist/
        shell: bash # 确保 ls 命令在所有平台可用

      - name: Upload Windows Artifact (NSIS Installer)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Windows-Setup-${{ matrix.arch || 'x64' }}-${{ github.run_id }}
          path: dist/*.exe 

      - name: Upload Windows Artifact (ZIP)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Windows-portable-${{ matrix.arch || 'x64' }}-${{ github.run_id }}
          path: dist/*.zip 

      - name: Upload macOS Artifact (DMG)
        if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-macOS-x64-${{ github.run_id }}.dmg
          path: dist/*.dmg

      - name: Upload macOS Artifact (ZIP)
        if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-macOS-x64-zip-${{ github.run_id }}
          path: dist/*mac*.zip 

      - name: Upload Linux Artifact (AppImage)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-AppImage-${{ matrix.arch || 'amd64' }}-${{ github.run_id }}
          path: dist/*.AppImage
          
      - name: Upload Linux Artifact (deb)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-deb-${{ matrix.arch || 'amd64' }}-${{ github.run_id }}
          path: dist/*.deb

      - name: Upload Linux Artifact (rpm)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Webhook-Sender-Linux-rpm-${{ matrix.arch || 'x86_64' }}-${{ github.run_id }}
          path: dist/*.rpm